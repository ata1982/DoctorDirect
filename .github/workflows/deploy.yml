name: Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: ./doctor-direct-nextjs # リポジトリルートからの相対パス

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    env: # test-and-buildジョブ全体で利用可能な環境変数
      DATABASE_URL: ${{ secrets.DATABASE_URL }} # Prisma generate や build で必要な場合
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      # プロジェクト固有のAPIキーも必要なら追加 (例)
      # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      # GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test --if-present

      - name: Build application
        run: npm run build
        # ビルド時に NEXT_PUBLIC_ プレフィックスの環境変数を渡す場合はここで env を設定
        # 例: env:
        #       NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Render via Deploy Hook
        id: deploy_hook
        run: |
          echo "Triggering Render Deploy Hook..."
          http_response=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}")
          body=$(echo "$http_response" | sed '$d')
          http_code=$(echo "$http_response" | tail -n1)

          echo "Deploy Hook HTTP status: $http_code"
          echo "Deploy Hook response body: $body"

          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Deploy to Render via API (Fallback)
        if: steps.deploy_hook.outputs.status == 'failure' || steps.deploy_hook.outcome == 'failure'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Deploy Hook failed or was skipped. Attempting deployment via Render API..."
          API_URL="https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys"
          
          http_response_api=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            --data '{ "clearCache": "do_not_clear" }' \
            "$API_URL")

          body_api=$(echo "$http_response_api" | sed '$d')
          http_code_api=$(echo "$http_response_api" | tail -n1)

          echo "Render API HTTP status: $http_code_api"
          echo "Render API response body: $body_api"

          if ! ( [ "$http_code_api" -ge 200 ] && [ "$http_code_api" -lt 300 ] ); then
            exit 1 # APIデプロイも失敗したらジョブを失敗させる
          fi
      
      - name: Deployment Outcome
        if: always()
        run: |
          if ${{ needs.test-and-build.result == 'success' }}; then
            if [[ "${{ steps.deploy_hook.outputs.status }}" == "success" && "${{ steps.deploy_hook.outcome }}" == "success" ]]; then
              echo "✅ Deployment to Render initiated successfully using Deploy Hook."
            elif [[ ("${{ steps.deploy_hook.outputs.status }}" == "failure" || "${{ steps.deploy_hook.outcome }}" == "failure") && success() ]]; then
              echo "✅ Deployment to Render initiated successfully using Render API (fallback)."
            else
              echo "❌ Deployment to Render failed."
            fi
          else
            echo "❌ Deployment to Render skipped due to test-and-build failure."
          fi